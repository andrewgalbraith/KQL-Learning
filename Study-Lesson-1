// 👈 We have automatically added the "Samples" database to your connection pane.
//    It contains sample data sets that you can use to run KQL queries and get a "feel" for the language.
// 🏃‍♂️ You can run a query by placing the cursor anywhere on the query text and clicking the run button (or Shift + Enter).
// 📄 KQL overview https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/ 
// 📃 Quick KQL reference guide can be found here https://docs.microsoft.com/en-us/azure/data-explorer/kql-quick-reference
//
// Start by browsing data in the StormEvents table, and view a small sample of records
// - Most queries start with a table name (in this case StormEvents that contains U.S weather data).
// - The "take" operator will return the specified number of rows (in this case 10) from the table (not necessarily in order).
StormEvents
| take 10

// Create a calculated column by computing a value for every row
// - The "extend" operator adds a new calculated column.
// - The "project" operator selects the columns to include in the result
StormEvents
| take 5
| extend Duration = EndTime - StartTime                      
| project StartTime, EndTime, Duration, EventType, State;    

// Use aggregation functions 
// - The "summarize" operator calculates aggregations. You can use several aggregation functions in one summarize operator
// - The "top" operator returns the first N rows of the dataset when the dataset is sorted
StormEvents 
| summarize StormCount = count(), TypeOfStorms = dcount(EventType) by State     
| top 5 by StormCount desc

// Visualize the data by rendering charts
// - The "render" operator visualizes query result as a chart. It should be the last operator in a query. 
StormEvents
| where EventType =="Flood"
| summarize EventCount = count() by State 
| where EventCount > 100
| render piechart

// - The "project" operation defines which column you want to see in the output. Column names will be separated by commas ","
StormEvents
| project EventType, US_State=State, Damage=DamageCrops+DamageProperty, Injuries=InjuriesDirect+InjuriesIndirect
| take 10

// - The "project-away" operator removes specific columns and indicates which columns to remove
StormEvents
| project-away EpisodeId, EventId
| take 10

// - The "where" operator filters results that satisfy a given condition. 
StormEvents
| where DamageProperty  > 0
| where StartTime > ago(365d)
| project State, EventType, DamageProperty

StormEvents
| where DamageCrops > 0
| where State == "FLORIDA"
| project State, EventType, DamageCrops

// - The "has" operator is case-insensitive and matches on a full term (Term is defined here: https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/datatypes-string-operators#what-is-a-term)
StormEvents
| where DamageProperty > 0
| where State == "FLORIDA"
| where EventType has "wind"
| project StartTime, EventType, DamageProperty

// - The "contains" operator is similar to "has", but it matches on any substring. For example, the following query will return results such as 'Freezing fog' and 'Frost/Freeze'
StormEvents
| where EventType contains "Free"

// - The syntax for constructing a date range KQL query is as follows:
// | where time between ( datetime(value)..datetime(value)
StormEvents
| where StartTime between (datetime(2007-01-01)..datetime(2007-06-01))
| where DamageProperty > 0
| where State == "FLORIDA"
| project StartTime, EventType, DamageProperty
| take 50

